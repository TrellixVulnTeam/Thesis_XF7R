"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyDefaults = void 0;
var chart_def_1 = require("@plotex/chart-def");
var expand_chart_def_1 = require("./expand-chart-def");
//
// Extract series from the chart definition's data.
//
function extractValues(data, seriesConfigs) {
    if (!data) {
        return [];
    }
    var values = seriesConfigs
        .filter(function (axis) {
        if (!data.series) {
            return false;
        }
        var axisSeries = data.series[axis.series];
        if (!axisSeries || !axisSeries.values || axisSeries.type !== "number") {
            return false;
        }
        return true;
    })
        .map(function (axis) { return data.series[axis.series].values || []; });
    var flattened = [].concat.apply([], values); // Flatten array of arrays.
    return flattened;
}
function computeMin(values) {
    return Math.floor(Math.min.apply(Math, values.filter(function (v) { return v !== undefined && v !== null && !Number.isNaN(v); })) * 100) / 100;
}
function computeMax(values) {
    return Math.ceil(Math.max.apply(Math, values.filter(function (v) { return v !== undefined && v !== null && !Number.isNaN(v) && Number.isFinite(v); })) * 100) / 100;
}
//
// Apply defaults to a chart definition and patch misssing values.
//
function applyDefaults(inputChartDef, plotDefaults) {
    var chartDef = Object.assign({}, inputChartDef);
    if (!chartDef.plotConfig) {
        if (plotDefaults) {
            chartDef.plotConfig = Object.assign({}, expand_chart_def_1.expandPlotConfig(plotDefaults));
        }
        else {
            chartDef.plotConfig = {};
        }
    }
    else {
        if (plotDefaults) {
            chartDef.plotConfig = Object.assign({}, expand_chart_def_1.expandPlotConfig(plotDefaults), chartDef.plotConfig);
        }
        else {
            chartDef.plotConfig = Object.assign({}, chartDef.plotConfig);
        }
    }
    if (chartDef.plotConfig.chartType === undefined) {
        chartDef.plotConfig.chartType = chart_def_1.ChartType.Line;
    }
    if (chartDef.plotConfig.width === undefined) {
        chartDef.plotConfig.width = 800;
    }
    if (chartDef.plotConfig.height === undefined) {
        chartDef.plotConfig.height = 600;
    }
    if (!chartDef.axisMap) {
        chartDef.axisMap = { y: [], y2: [] };
    }
    else {
        chartDef.axisMap = Object.assign({}, chartDef.axisMap);
        if (!chartDef.axisMap.y) {
            chartDef.axisMap.y = [];
        }
        if (!chartDef.axisMap.y2) {
            chartDef.axisMap.y2 = [];
        }
    }
    var remainingSeries = chartDef && chartDef.data && chartDef.data.series && Object.assign({}, chartDef.data.series) || {};
    if ((chartDef.axisMap.x === undefined ||
        chartDef.axisMap.x.series === undefined) &&
        remainingSeries.x !== undefined) {
        // Default the x axis to the series named x.
        if (!chartDef.axisMap.x) {
            chartDef.axisMap.x = { series: "x" };
        }
        else {
            chartDef.axisMap.x.series = "x";
        }
        delete remainingSeries.x;
    }
    if (chartDef.axisMap.y.length === 0 &&
        remainingSeries.y !== undefined) {
        // Default the y axis to the series named y.
        chartDef.axisMap.y = [
            {
                series: "y",
            },
        ];
    }
    if (chartDef.axisMap.y2.length === 0 &&
        remainingSeries.y2 !== undefined) {
        // Default the y2 axis to the series named y2.
        chartDef.axisMap.y2 = [
            {
                series: "y2",
            },
        ];
    }
    if (chartDef.axisMap.y.length === 0 &&
        chartDef.axisMap.y2.length === 0) {
        chartDef.axisMap.y = chartDef.data && chartDef.data.series && expand_chart_def_1.expandYSeriesConfigArray(Object.keys(remainingSeries)) || [];
    }
    if (!chartDef.plotConfig.y) {
        chartDef.plotConfig.y = {};
    }
    var y1Values;
    if (chartDef.plotConfig.y.min === undefined) {
        y1Values = extractValues(chartDef.data, chartDef.axisMap.y);
        if (y1Values.length > 0) {
            chartDef.plotConfig.y.min = computeMin(y1Values);
        }
    }
    if (chartDef.plotConfig.y.max === undefined) {
        if (!y1Values) {
            y1Values = extractValues(chartDef.data, chartDef.axisMap.y);
        }
        if (y1Values.length > 0) {
            chartDef.plotConfig.y.max = computeMax(y1Values);
        }
    }
    if (!chartDef.plotConfig.y2) {
        chartDef.plotConfig.y2 = {};
    }
    var y2Values;
    if (chartDef.plotConfig.y2.min === undefined) {
        y2Values = extractValues(chartDef.data, chartDef.axisMap.y2);
        if (y2Values.length > 0) {
            chartDef.plotConfig.y2.min = computeMin(y2Values);
        }
    }
    if (chartDef.plotConfig.y2.max === undefined) {
        if (!y2Values) {
            y2Values = extractValues(chartDef.data, chartDef.axisMap.y2);
        }
        if (y2Values.length > 0) {
            chartDef.plotConfig.y2.max = computeMax(y2Values);
        }
    }
    return chartDef;
}
exports.applyDefaults = applyDefaults;
//# sourceMappingURL=apply-defaults.js.map