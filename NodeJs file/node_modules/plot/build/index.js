"use strict";
/**
 * A simple and forgiving chart plotting library for JavaScript and TypeScript.
 *
 * @example
 *
 * ```javascript
 * const data = [10, 30, 15, 45]; // Array of numbers.
 * plot(data)
 *      .renderImage("./myplot.png"); // Need &commat;plotex/render-image installed for this.
 * ```
 *
 * @example
 *
 * ```javascript
 * const htmlElement = ...; // An element in the DOM.
 * const data = [10, 30, 15, 45]; // Array of numbers.
 * plot(data)
 *      .renderDOM(htmlElement); // Need &commat;plotex/render-dom installed for this.
 * ```
 * @packageDocumentation
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.plot = void 0;
var plot_api_1 = require("./plot-api");
var utils_1 = require("./utils");
__exportStar(require("@plotex/serialization"), exports);
__exportStar(require("@plotex/chart-def"), exports);
var seriesPlotDefaults = {
    legend: {
        show: false,
    },
};
var dataFramePlotDefaults = {
    legend: {
        show: true,
    },
};
//
// Serialize an array of values.
//
function serializeValueArray(input) {
    var serializedData = {
        series: {
            y: {
                type: input.length > 0
                    ? utils_1.determineType(input[0])
                    : "undefined",
                values: input,
            },
        },
    };
    return serializedData;
}
//
// Construct a JavaScript object from arrays of fields and values.
//
function toObject(fields, values) {
    if (fields.length !== values.length) {
        throw new Error("toObject: keys and values arrays must be the same length.");
    }
    var output = {};
    for (var i = 0; i < fields.length; ++i) {
        output[fields[i]] = values[i];
    }
    return output;
}
//
// Create an object from array.
//
function arrayToObject(arr, keySelector, valueSelector) {
    return toObject(arr.map(keySelector), arr.map(valueSelector));
}
//
// Serialize column-based input data.
//
function serializeValueObject(columnNames, input) {
    var columns = columnNames
        .filter(function (name) {
        var values = input[name];
        if (utils_1.isArray(values)) {
            return values.length > 0; // Only want arrays with > 0 elements.
        }
        else {
            return true;
        }
    })
        .map(function (name) {
        var seriesSpec = input[name];
        if (utils_1.isArray(seriesSpec)) {
            var type = utils_1.determineType(seriesSpec[0]);
            var column = {
                name: name,
                series: {
                    type: type,
                    values: seriesSpec,
                },
            };
            return column;
        }
        else {
            var type = utils_1.determineType(seriesSpec.values[0]);
            var column = {
                name: name,
                series: {
                    type: type,
                    values: seriesSpec.values,
                    annotations: seriesSpec.annotations,
                },
            };
            return column;
        }
    });
    var serializedData = {
        series: arrayToObject(columns, function (column) { return column.name; }, function (column) { return column.series; }),
    };
    return serializedData;
}
//
// Serialize a data array.
//
function serializeArray(data) {
    if (data.length > 0 && utils_1.isObject(data[0])) {
        return serializeObjectArray(data);
    }
    else {
        return serializeValueArray(data);
    }
}
//
// Serialize a data spec.
//
function serializeDataSpec(input) {
    var serializedData = utils_1.isArray(input.values) ? serializeArray(input.values) : serializeValueObject(Object.keys(input.values), input.values);
    if (input.annotations) {
        if (utils_1.isArray(input.annotations)) {
            for (var _i = 0, _a = Object.keys(serializedData.series); _i < _a.length; _i++) {
                var seriesName = _a[_i];
                var series = serializedData.series[seriesName];
                if (series) {
                    if (!series.annotations) {
                        series.annotations = [];
                    }
                    for (var _b = 0, _c = input.annotations; _b < _c.length; _b++) {
                        var annotation = _c[_b];
                        series.annotations.push(annotation);
                    }
                }
            }
        }
        else {
            for (var _d = 0, _e = Object.keys(input.annotations); _d < _e.length; _d++) {
                var annotatedSeriesName = _e[_d];
                var series = serializedData.series[annotatedSeriesName];
                if (series) {
                    if (!series.annotations) {
                        series.annotations = [];
                    }
                    for (var _f = 0, _g = input.annotations[annotatedSeriesName]; _f < _g.length; _f++) {
                        var annotation = _g[_f];
                        series.annotations.push(annotation);
                    }
                }
            }
        }
    }
    return serializedData;
}
//
// Serialize an array of objects.
//
function serializeObjectArray(input) {
    if (input.length <= 0) {
        return { series: {} }; // No data.
    }
    var columnNames = Object.keys(input[0]);
    if (columnNames.length <= 0) {
        return { series: {} }; // No data.
    }
    var columns = columnNames
        .map(function (name) {
        var values = input.map(function (obj) { return obj[name]; });
        var type = utils_1.determineType(values[0]);
        var column = {
            name: name,
            series: {
                type: type,
                values: values,
            },
        };
        return column;
    });
    var serializedData = {
        series: arrayToObject(columns, function (column) { return column.name; }, function (column) { return column.series; }),
    };
    return serializedData;
}
//
// Serialize input data to the standard format according to its type.
//
function serializeInput(input) {
    var isInputArray = utils_1.isArray(input);
    var isInputObject = !isInputArray && utils_1.isObject(input);
    var isValueArray = isInputArray && !utils_1.isObject(input[0]);
    if (isValueArray) {
        return [serializeValueArray(input), seriesPlotDefaults];
    }
    else if (isInputObject) {
        var columnNames = Object.keys(input);
        if (columnNames.length === 1 && columnNames[0] === "values") {
            return [serializeDataSpec(input), dataFramePlotDefaults];
        }
        else if (columnNames.length === 2 && columnNames[0] === "values" && columnNames[1] === "annotations") {
            return [serializeDataSpec(input), dataFramePlotDefaults];
        }
        else {
            return [serializeValueObject(columnNames, input), dataFramePlotDefaults];
        }
    }
    else {
        return [serializeObjectArray(input), dataFramePlotDefaults];
    }
}
/**
 * Create a plot from regular JavaScript data.
 *
 * @param input - The data to plot. Can be an array of numbers or an array objects where the fields in the objects specify the data series.
 * @param plotDef - Optional configuration to control the plot.
 * @param axisMap - Optional configuration that maps data series to axis'.
 *
 * @returns A plot API object that is used to further configure the plot, serialize it or render it to an image.
 *
 * @example
 *
 * ```javascript
 * const data = [10, 30, 15, 45]; // Array of numbers.
 * plot(data)
 *      .renderImage("./myplot.png"); // Need &commat;plotex/render-image installed for this.
 * ```
 *
 * @example
 *
 * ```javascript
 * const data = [ // Array of JS objects to specify multiple data series.
 *  { A: 10, B: 50 },
 *  { A: 30, B: 45, },
 *  { A: 15, B: 60 },
 *  { A: 45, B: 65 }
 * ];
 * plot(data)
 *      .renderImage("./myplot.png"); // Need &commat;plotex/render-image installed for this.
 * ```
 *
 * @example
 *
 * ```javascript
 * const data = {
 *      A: [10, 30, 15, 45],
 *      B: [50, 45, 60, 65]
 * };
 * plot(data)
 *      .renderImage("./myplot.png"); // Need &commat;plotex/render-image installed for this.
 * ```
 */
function plot(input, plotDef, axisMap) {
    var _a = serializeInput(input), serializedData = _a[0], plotDefaults = _a[1];
    return new plot_api_1.PlotAPI(serializedData, plotDef || {}, axisMap || {}, plotDefaults);
}
exports.plot = plot;
//# sourceMappingURL=index.js.map